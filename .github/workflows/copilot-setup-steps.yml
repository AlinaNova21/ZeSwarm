name: "Copilot Setup Steps"
# Automatically run the setup steps when they are changed to allow for easy validation, and
# allow manual testing through the repository's "Actions" tab
on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  schedule:
    # Run weekly to keep environment fresh
    - cron: '0 2 * * 1'

jobs: # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.
  copilot-setup-steps:
    runs-on: ubuntu-latest

    # Set the permissions to the lowest permissions possible needed for your steps.
    # Copilot will be given its own token for its operations.
    permissions:
      # If you want to clone the repository as part of your setup steps, for example to install dependencies, you'll need the `contents: read` permission. If you don't clone the repository in your setup steps, Copilot will do this for you automatically after the steps complete.
      contents: read
    name: Setup Development Environment
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        run_install: false
        
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Create pnpm workspace configuration
      run: |
        cat > pnpm-workspace.yaml << EOF
        packages:
          - '.'
        EOF
        
    - name: Migrate from Yarn to pnpm
      run: |
        # Remove Yarn files
        rm -f yarn.lock .yarnrc.yml
        rm -rf .yarn
        
        # Install dependencies with pnpm
        pnpm install --frozen-lockfile=false
        
    - name: Verify TypeScript setup
      run: |
        # Check TypeScript compilation
        pnpm tsc --noEmit
        
        # Check if build works
        pnpm build
        
    - name: Run linting
      run: |
        # Run existing linter if available
        if grep -q "\"test\":" package.json; then
          pnpm test
        fi
        
    - name: Generate migration report
      run: |
        echo "# TypeScript Migration Status Report" > migration-status.md
        echo "Generated: $(date)" >> migration-status.md
        echo "" >> migration-status.md
        
        # Count files
        JS_COUNT=$(find src -name "*.js" -not -path "*/tmp/*" | wc -l)
        TS_COUNT=$(find src -name "*.ts" -not -path "*/tmp/*" | wc -l)
        TOTAL=$((JS_COUNT + TS_COUNT))
        PERCENTAGE=$((TS_COUNT * 100 / TOTAL))
        
        echo "## Current Status" >> migration-status.md
        echo "- JavaScript files: $JS_COUNT" >> migration-status.md
        echo "- TypeScript files: $TS_COUNT" >> migration-status.md
        echo "- Total files: $TOTAL" >> migration-status.md
        echo "- Migration progress: $PERCENTAGE%" >> migration-status.md
        echo "" >> migration-status.md
        
        echo "## TypeScript Files" >> migration-status.md
        find src -name "*.ts" -not -path "*/tmp/*" | sort | sed 's/^/- /' >> migration-status.md
        echo "" >> migration-status.md
        
        echo "## Remaining JavaScript Files" >> migration-status.md
        find src -name "*.js" -not -path "*/tmp/*" | sort | sed 's/^/- /' >> migration-status.md
        
    - name: Upload migration report
      uses: actions/upload-artifact@v3
      with:
        name: migration-status-report
        path: migration-status.md
        
    - name: Install additional TypeScript tools
      run: |
        # Install useful TypeScript development tools
        pnpm add -D @typescript-eslint/parser @typescript-eslint/eslint-plugin
        pnpm add -D eslint-plugin-import eslint-plugin-prefer-arrow
        
        # TypeScript utilities for migration
        pnpm add -D typescript-transform-paths
        pnpm add -D ts-node @types/node
        
    - name: Verify migration tools
      run: |
        # Check that migration scripts exist
        if [ ! -f "scripts/migrate-file.js" ]; then
          echo "Warning: migrate-file.js script not found"
        fi
        
        if [ ! -f "tsconfig.strict.json" ]; then
          echo "Warning: tsconfig.strict.json not found"
        fi
        
    - name: Environment summary
      run: |
        echo "## Environment Setup Complete âœ…"
        echo "- Node.js: $(node --version)"
        echo "- pnpm: $(pnpm --version)"
        echo "- TypeScript: $(pnpm tsc --version)"
        echo ""
        echo "## Available Commands"
        echo "- \`pnpm install\` - Install dependencies"
        echo "- \`pnpm build\` - Build the project"
        echo "- \`pnpm test\` - Run linting/tests"
        echo "- \`pnpm tsc --noEmit\` - Type check without compilation"
        echo "- \`node scripts/migrate-file.js src/file.js\` - Migrate a JS file to TS"
