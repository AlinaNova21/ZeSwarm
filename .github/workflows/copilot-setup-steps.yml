name: Copilot Environment Setup
on:
  workflow_dispatch:
  schedule:
    # Run weekly to keep environment fresh
    - cron: '0 2 * * 1'

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    name: Setup Development Environment
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        run_install: false
        
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Create pnpm workspace configuration
      run: |
        cat > pnpm-workspace.yaml << EOF
        packages:
          - '.'
        EOF
        
    - name: Migrate from Yarn to pnpm
      run: |
        # Remove Yarn files
        rm -f yarn.lock .yarnrc.yml
        rm -rf .yarn
        
        # Install dependencies with pnpm
        pnpm install --frozen-lockfile=false
        
    - name: Verify TypeScript setup
      run: |
        # Check TypeScript compilation
        pnpm tsc --noEmit
        
        # Check if build works
        pnpm build
        
    - name: Run linting
      run: |
        # Run existing linter if available
        if grep -q "\"test\":" package.json; then
          pnpm test
        fi
        
    - name: Generate migration report
      run: |
        echo "# TypeScript Migration Status Report" > migration-status.md
        echo "Generated: $(date)" >> migration-status.md
        echo "" >> migration-status.md
        
        # Count files
        JS_COUNT=$(find src -name "*.js" -not -path "*/tmp/*" | wc -l)
        TS_COUNT=$(find src -name "*.ts" -not -path "*/tmp/*" | wc -l)
        TOTAL=$((JS_COUNT + TS_COUNT))
        PERCENTAGE=$((TS_COUNT * 100 / TOTAL))
        
        echo "## Current Status" >> migration-status.md
        echo "- JavaScript files: $JS_COUNT" >> migration-status.md
        echo "- TypeScript files: $TS_COUNT" >> migration-status.md
        echo "- Total files: $TOTAL" >> migration-status.md
        echo "- Migration progress: $PERCENTAGE%" >> migration-status.md
        echo "" >> migration-status.md
        
        echo "## TypeScript Files" >> migration-status.md
        find src -name "*.ts" -not -path "*/tmp/*" | sort | sed 's/^/- /' >> migration-status.md
        echo "" >> migration-status.md
        
        echo "## Remaining JavaScript Files" >> migration-status.md
        find src -name "*.js" -not -path "*/tmp/*" | sort | sed 's/^/- /' >> migration-status.md
        
    - name: Upload migration report
      uses: actions/upload-artifact@v3
      with:
        name: migration-status-report
        path: migration-status.md
        
    - name: Install additional TypeScript tools
      run: |
        # Install useful TypeScript development tools
        pnpm add -D @typescript-eslint/parser @typescript-eslint/eslint-plugin
        pnpm add -D eslint-plugin-import eslint-plugin-prefer-arrow
        
        # TypeScript utilities for migration
        pnpm add -D typescript-transform-paths
        pnpm add -D ts-node @types/node
        
    - name: Create TypeScript configuration templates
      run: |
        # Create strict tsconfig for new files
        cat > tsconfig.strict.json << 'EOF'
        {
          "extends": "./tsconfig.json",
          "compilerOptions": {
            "strict": true,
            "noImplicitAny": true,
            "noImplicitReturns": true,
            "noImplicitThis": true,
            "noUncheckedIndexedAccess": true,
            "exactOptionalPropertyTypes": true
          }
        }
        EOF
        
        # Create migration helper script
        cat > scripts/migrate-file.js << 'EOF'
        #!/usr/bin/env node
        const fs = require('fs');
        const path = require('path');
        
        const filePath = process.argv[2];
        if (!filePath) {
          console.error('Usage: node migrate-file.js <file.js>');
          process.exit(1);
        }
        
        const jsPath = path.resolve(filePath);
        const tsPath = jsPath.replace(/\.js$/, '.ts');
        
        if (!fs.existsSync(jsPath)) {
          console.error(`File not found: ${jsPath}`);
          process.exit(1);
        }
        
        // Simple migration: rename and add basic types
        let content = fs.readFileSync(jsPath, 'utf8');
        
        // Add basic type annotations for common patterns
        content = content.replace(/function\s+(\w+)\s*\(/g, 'function $1(');
        content = content.replace(/const\s+(\w+)\s*=\s*\(/g, 'const $1 = (');
        
        fs.writeFileSync(tsPath, content);
        fs.unlinkSync(jsPath);
        
        console.log(`Migrated ${jsPath} -> ${tsPath}`);
        EOF
        
        chmod +x scripts/migrate-file.js
        
    - name: Environment summary
      run: |
        echo "## Environment Setup Complete âœ…"
        echo "- Node.js: $(node --version)"
        echo "- pnpm: $(pnpm --version)"
        echo "- TypeScript: $(pnpm tsc --version)"
        echo ""
        echo "## Available Commands"
        echo "- \`pnpm install\` - Install dependencies"
        echo "- \`pnpm build\` - Build the project"
        echo "- \`pnpm test\` - Run linting/tests"
        echo "- \`pnpm tsc --noEmit\` - Type check without compilation"
        echo "- \`node scripts/migrate-file.js src/file.js\` - Migrate a JS file to TS"